name: "Integrate"

on:
  pull_request:
  push:
    branches:
      - "master"

jobs:
  composer-json-lint:
    name: "Lint composer.json"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.0"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer-normalize, composer-require-checker, composer-unused

      - name: "Get composer cache directory"
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-progress"

      - name: "Validate composer.json"
        run: "composer validate --strict"

      - name: "Normalize composer.json"
        run: "composer-normalize --dry-run"

      - name: "Check composer.json explicit dependencies"
        run: "composer-require-checker"

      - name: "Check composer.json unused dependencies"
        run: "composer-unused --excludePackage=php"

  subdirs:
    name: "Generate matrix for subsplit"

    runs-on: "ubuntu-latest"

    outputs:
      subdirs: ${{ steps.subdirs.outputs.value }}

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Gather CI configuration"
        uses: sergeysova/jq-action@v2
        id: subdirs
        with:
          cmd: ls -1 -d src/*/ | jq -nR '[(inputs|split("\n"))[0]]'

  composer-json-lint:
    name: "Lint composer.json"

    needs: [subdirs]

    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.subdirs.outputs.subdirs) }}

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

  # tests:
  #   name: "Tests"

  #   runs-on: "ubuntu-latest"

  #   strategy:
  #     matrix:
  #       php-version:
  #         - "8.0"
  #         - "8.1"

  #   steps:
  #     - name: "Checkout"
  #       uses: "actions/checkout@v2"

  #     - name: "Install PHP"
  #       uses: "shivammathur/setup-php@v2"
  #       with:
  #         coverage: "pcov"
  #         php-version: "${{ matrix.php-version }}"
  #         ini-values: zend.assertions=1

  #     - name: "Get composer cache directory"
  #       id: composercache
  #       run: echo "::set-output name=dir::$(composer config cache-files-dir)"

  #     - name: "Cache dependencies"
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.composercache.outputs.dir }}
  #         key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
  #         restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

  #     - name: "Install dependencies"
  #       run: "composer update --no-interaction --no-progress"

  #     - name: "Run tests"
  #       timeout-minutes: 3
  #       run: "vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-xml=coverage/coverage-xml --log-junit=coverage/junit.xml"

  #     - name: "Send code coverage report to Codecov.io"
  #       if: ${{ matrix.php-version == '8.0' }}
  #       uses: codecov/codecov-action@v1
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         file: ./coverage.xml
  #         fail_ci_if_error: true

  #     - name: "Infection"
  #       timeout-minutes: 10
  #       run: "vendor/bin/infection --ansi --threads=$(nproc) --coverage=coverage --skip-initial-tests"
  #       env:
  #         INFECTION_BADGE_API_KEY: ${{ secrets.INFECTION_BADGE_API_KEY }}

  # coding-standards:
  #   name: "Coding Standards"

  #   runs-on: "ubuntu-latest"

  #   strategy:
  #     matrix:
  #       php-version:
  #         - "8.0"

  #   steps:
  #     - name: "Checkout"
  #       uses: "actions/checkout@v2"

  #     - name: "Install PHP"
  #       uses: "shivammathur/setup-php@v2"
  #       with:
  #         coverage: "none"
  #         php-version: "${{ matrix.php-version }}"

  #     - name: "Get composer cache directory"
  #       id: composercache
  #       run: echo "::set-output name=dir::$(composer config cache-files-dir)"

  #     - name: "Cache dependencies"
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.composercache.outputs.dir }}
  #         key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
  #         restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

  #     - name: "Install dependencies"
  #       run: "composer update --no-interaction --no-progress"

  #     - name: "Check coding standards"
  #       run: "vendor/bin/php-cs-fixer fix --verbose --dry-run --diff"

  # static-analysis:
  #   name: "Static Analysis"

  #   runs-on: "ubuntu-latest"

  #   strategy:
  #     matrix:
  #       php-version:
  #         - "8.0"

  #   steps:
  #     - name: "Checkout"
  #       uses: "actions/checkout@v2"

  #     - name: "Install PHP"
  #       uses: "shivammathur/setup-php@v2"
  #       with:
  #         coverage: "none"
  #         php-version: "${{ matrix.php-version }}"
  #         tools: cs2pr

  #     - name: "Get composer cache directory"
  #       id: composercache
  #       run: echo "::set-output name=dir::$(composer config cache-files-dir)"

  #     - name: "Cache dependencies"
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.composercache.outputs.dir }}
  #         key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
  #         restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

  #     - name: "Install dependencies"
  #       run: "composer update --no-interaction --no-progress"

  #     - name: "Run static analysis"
  #       run: "vendor/bin/psalm --no-progress --shepherd --output-format=github --show-info=false --stats"
